var n=r=>r instanceof Promise;var u=(r,t)=>n(r)?r.then(e=>t(e)).catch(e=>t(e)):t(r),d=(...r)=>t=>r.reduce((e,s)=>s(e),t),y=(...r)=>async(...t)=>{try{return await r.reduce(u,t)}catch(e){return e}};var i=Symbol("failed"),o=r=>({isFailed:i,err:r}),l=(r,t)=>{if(n(r))return r.then(e=>c(e)?e:t(e)).catch(e=>o(e));try{return c(r)?r:t(r)}catch(e){return o(e)}},c=r=>r instanceof Object&&r.isFailed===i,m=(...r)=>async t=>{try{let e=await r.reduce(l,t);return c(e),e}catch(e){return o(e)}};export{y as asyncPipe,c as isFailed,d as pipe,m as rail};
